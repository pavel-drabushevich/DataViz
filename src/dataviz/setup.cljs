(ns dataviz.setup)

(def ^:private core-names
  '{re-pattern {:name cljs.core.re-pattern},
    keyword? {:name cljs.core.keyword?},
    max-key {:name cljs.core.max-key},
    list* {:name cljs.core.list*},
    == {:name cljs.core.==},
    instance? {:name cljs.core.instance?},
    pr-str-with-opts {:name cljs.core.pr-str-with-opts},
    sequential? {:name cljs.core.sequential?},
    fn? {:name cljs.core.fn?},
    empty {:name cljs.core.empty},
    dorun {:name cljs.core.dorun},
    remove-method {:name cljs.core.remove-method},
    gensym {:name cljs.core.gensym},
    not= {:name cljs.core.not=},
    bit-or {:name cljs.core.bit-or},
    add-watch {:name cljs.core.add-watch},
    some {:name cljs.core.some},
    nil? {:name cljs.core.nil?},
    string? {:name cljs.core.string?},
    second {:name cljs.core.second},
    keys {:name cljs.core.keys},
    bit-set {:name cljs.core.bit-set},
    false? {:name cljs.core.false?},
    true? {:name cljs.core.true?},
    repeat {:name cljs.core.repeat},
    zipmap {:name cljs.core.zipmap},
    distinct {:name cljs.core.distinct},
    string-print {:name cljs.core.string-print},
    get-in {:name cljs.core.get-in},
    bit-xor {:name cljs.core.bit-xor},
    complement {:name cljs.core.complement},
    get-validator {:name cljs.core.get-validator},
    js->clj {:name cljs.core.js->clj},
    derive {:name cljs.core.derive},
    partition-by {:name cljs.core.partition-by},
    rem {:name cljs.core.rem},
    odd? {:name cljs.core.odd?},
    symbol? {:name cljs.core.symbol?},
    js-obj {:name cljs.core.js-obj},
    re-matches {:name cljs.core.re-matches},
    split-with {:name cljs.core.split-with},
    spread {:name cljs.core.spread},
    next {:name cljs.core.next},
    symbol {:name cljs.core.symbol},
    vals {:name cljs.core.vals},
    select-keys {:name cljs.core.select-keys},
    rand {:name cljs.core.rand},
    deref {:name cljs.core.deref},
    make-hierarchy {:name cljs.core.make-hierarchy},
    + {:name cljs.core.+},
    number? {:name cljs.core.number?},
    descendants {:name cljs.core.descendants},
    last {:name cljs.core.last},
    some-fn {:name cljs.core.some-fn},
    integer? {:name cljs.core.integer?},
    prn {:name cljs.core.prn},
    with-meta {:name cljs.core.with-meta},
    * {:name cljs.core.*},
    butlast {:name cljs.core.butlast},
    - {:name cljs.core.-},
    seq? {:name cljs.core.seq?},
    identical? {:name cljs.core.identical?},
    pr-sequential {:name cljs.core.pr-sequential},
    vary-meta {:name cljs.core.vary-meta},
    bit-flip {:name cljs.core.bit-flip},
    zero? {:name cljs.core.zero?},
    bit-and {:name cljs.core.bit-and},
    newline {:name cljs.core.newline},
    replicate {:name cljs.core.replicate},
    keep-indexed {:name cljs.core.keep-indexed},
    distinct? {:name cljs.core.distinct?},
    vec {:name cljs.core.vec},
    concat {:name cljs.core.concat},
    update-in {:name cljs.core.update-in},
    vector {:name cljs.core.vector},
    conj {:name cljs.core.conj},
    / {:name cljs.core._SLASH_},
    assoc {:name cljs.core.assoc},
    boolean {:name cljs.core.boolean},
    neg? {:name cljs.core.neg?},
    js-delete {:name cljs.core.js-delete},
    isa? {:name cljs.core.isa?},
    remove-watch {:name cljs.core.remove-watch},
    vector? {:name cljs.core.vector?},
    split-at {:name cljs.core.split-at},
    map {:name cljs.core.map},
    counted? {:name cljs.core.counted?},
    frequencies {:name cljs.core.frequencies},
    rand-int {:name cljs.core.rand-int},
    iterate {:name cljs.core.iterate},
    mapcat {:name cljs.core.mapcat},
    assoc-in {:name cljs.core.assoc-in},
    inc {:name cljs.core.inc},
    every-pred {:name cljs.core.every-pred},
    re-find {:name cljs.core.re-find},
    bit-not {:name cljs.core.bit-not},
    seq {:name cljs.core.seq},
    filter {:name cljs.core.filter},
    js-keys {:name cljs.core.js-keys},
    alter-meta! {:name cljs.core.alter-meta!},
    re-seq {:name cljs.core.re-seq},
    empty? {:name cljs.core.empty?},
    name {:name cljs.core.name},
    aset {:name cljs.core.aset},
    nnext {:name cljs.core.nnext},
    doall {:name cljs.core.doall},
    not-any? {:name cljs.core.not-any?},
    reductions {:name cljs.core.reductions},
    into {:name cljs.core.into},
    ffirst {:name cljs.core.ffirst},
    bit-clear {:name cljs.core.bit-clear},
    hash {:name cljs.core.hash},
    associative? {:name cljs.core.associative?},
    drop-last {:name cljs.core.drop-last},
    replace {:name cljs.core.replace},
    parents {:name cljs.core.parents},
    map? {:name cljs.core.map?},
    prefers {:name cljs.core.prefers},
    quot {:name cljs.core.quot},
    reverse {:name cljs.core.reverse},
    count {:name cljs.core.count},
    set {:name cljs.core.set},
    fn->comparator {:name cljs.core.fn->comparator},
    comp {:name cljs.core.comp},
    nth {:name cljs.core.nth},
    constantly {:name cljs.core.constantly},
    namespace {:name cljs.core.namespace},
    pr-str {:name cljs.core.pr-str},
    < {:name cljs.core.<},
    sort-by {:name cljs.core.sort-by},
    cycle {:name cljs.core.cycle},
    peek {:name cljs.core.peek},
    pr-with-opts {:name cljs.core.pr-with-opts},
    reduce {:name cljs.core.reduce},
    interleave {:name cljs.core.interleave},
    cons {:name cljs.core.cons},
    str {:name cljs.core.str},
    remove-all-methods {:name cljs.core.remove-all-methods},
    first {:name cljs.core.first},
    = {:name cljs.core.=},
    memoize {:name cljs.core.memoize},
    range {:name cljs.core.range},
    tree-seq {:name cljs.core.tree-seq},
    set-validator! {:name cljs.core.set-validator!},
    prefer-method {:name cljs.core.prefer-method},
    partition-all {:name cljs.core.partition-all},
    not-every? {:name cljs.core.not-every?},
    > {:name cljs.core.>},
    max {:name cljs.core.max},
    identity {:name cljs.core.identity},
    fnext {:name cljs.core.fnext},
    min-key {:name cljs.core.min-key},
    reset-meta! {:name cljs.core.reset-meta!},
    array {:name cljs.core.array},
    subs {:name cljs.core.subs},
    >= {:name cljs.core.>=},
    reset! {:name cljs.core.reset!},
    even? {:name cljs.core.even?},
    bit-shift-left {:name cljs.core.bit-shift-left},
    methods {:name cljs.core.methods},
    compare {:name cljs.core.compare},
    group-by {:name cljs.core.group-by},
    get {:name cljs.core.get},
    <= {:name cljs.core.<=},
    fnil {:name cljs.core.fnil},
    force {:name cljs.core.force},
    partial {:name cljs.core.partial},
    array-seq {:name cljs.core.array-seq},
    pos? {:name cljs.core.pos?},
    take-while {:name cljs.core.take-while},
    underive {:name cljs.core.underive},
    ancestors {:name cljs.core.ancestors},
    hash-combine {:name cljs.core.hash-combine},
    partition {:name cljs.core.partition},
    map-indexed {:name cljs.core.map-indexed},
    contains? {:name cljs.core.contains?},
    interpose {:name cljs.core.interpose},
    apply {:name cljs.core.apply},
    swap! {:name cljs.core.swap!},
    subvec {:name cljs.core.subvec},
    rest {:name cljs.core.rest},
    keyword {:name cljs.core.keyword},
    mod {:name cljs.core.mod},
    nfirst {:name cljs.core.nfirst},
    nthnext {:name cljs.core.nthnext},
    dec {:name cljs.core.dec},
    undefined? {:name cljs.core.undefined?},
    println {:name cljs.core.println},
    aget {:name cljs.core.aget},
    pr {:name cljs.core.pr},
    drop {:name cljs.core.drop},
    aclone {:name cljs.core.aclone},
    pop {:name cljs.core.pop},
    atom {:name cljs.core.atom},
    bit-shift-right {:name cljs.core.bit-shift-right},
    delay? {:name cljs.core.delay?},
    realized? {:name cljs.core.realized?},
    disj {:name cljs.core.disj},
    merge-with {:name cljs.core.merge-with},
    take-nth {:name cljs.core.take-nth},
    take-last {:name cljs.core.take-last},
    take {:name cljs.core.take},
    set? {:name cljs.core.set?},
    rand-nth {:name cljs.core.rand-nth},
    juxt {:name cljs.core.juxt},
    alength {:name cljs.core.alength},
    to-array {:name cljs.core.to-array},
    hash-map {:name cljs.core.hash-map},
    bit-and-not {:name cljs.core.bit-and-not},
    compare-and-set! {:name cljs.core.compare-and-set!},
    type {:name cljs.core.type},
    repeatedly {:name cljs.core.repeatedly},
    trampoline {:name cljs.core.trampoline},
    remove {:name cljs.core.remove},
    find {:name cljs.core.find},
    coll? {:name cljs.core.coll?},
    drop-while {:name cljs.core.drop-while},
    not-empty {:name cljs.core.not-empty},
    flatten {:name cljs.core.flatten},
    list {:name cljs.core.list},
    every? {:name cljs.core.every?},
    flush {:name cljs.core.flush},
    sort {:name cljs.core.sort},
    dissoc {:name cljs.core.dissoc},
    not {:name cljs.core.not},
    get-method {:name cljs.core.get-method},
    merge {:name cljs.core.merge},
    min {:name cljs.core.min},
    bit-test {:name cljs.core.bit-test},
    keep {:name cljs.core.keep},
    meta {:name cljs.core.meta},
    prim-seq {:name cljs.core.prim-seq},
    *clojurescript-version* {:name cljs.core.*clojurescript-version*},
    assoc! {:name cljs.core.assoc!},
    bit-count {:name cljs.core.bit-count},
    bit-shift-right-zero-fill {:name cljs.core.bit-shift-right-zero-fill},
    booleans {:name cljs.core.booleans},
    bytes {:name cljs.core.bytes},
    cat {:name cljs.core.cat},
    char {:name cljs.core.char},
    chars {:name cljs.core.chars},
    chunked-seq? {:name cljs.core.chunked-seq?},
    clj->js {:name cljs.core.clj->js},
    clone {:name cljs.core.clone},
    cloneable? {:name cljs.core.cloneable?},
    comparator {:name cljs.core.comparator},
    completing {:name cljs.core.completing},
    conj! {:name cljs.core.conj!},
    dedupe {:name cljs.core.dedupe},
    default-dispatch-val {:name cljs.core.default-dispatch-val},
    disj! {:name cljs.core.disj!},
    dispatch-fn {:name cljs.core.dispatch-fn},
    dissoc! {:name cljs.core.dissoc!},
    double {:name cljs.core.double},
    double-array {:name cljs.core.double-array},
    doubles {:name cljs.core.doubles},
    eduction {:name cljs.core.eduction},
    ensure-reduced {:name cljs.core.ensure-reduced},
    ex-cause {:name cljs.core.ex-cause},
    ex-data {:name cljs.core.ex-data},
    ex-info {:name cljs.core.ex-info},
    ex-message {:name cljs.core.ex-message },
    filterv {:name cljs.core.filterv},
    float {:name cljs.core.float},
    floats{:name cljs.core.floats},
    hash-keyword {:name cljs.core.hash-keyword},
    hash-set {:name cljs.core.hash-set},
    ifn? {:name cljs.core.ifn?},
    indexed? {:name cljs.core.indexed?},
    int {:name cljs.core.int},
    int-array {:name cljs.core.int-array},
    into-array {:name cljs.core.into-array},
    ints {:name cljs.core.ints},
    iterable? {:name cljs.core.iterable?},
    js-invoke {:name cljs.core.js-invoke},
    js-mod {:name cljs.core.js-mod},
    key {:name cljs.core.key},
    keyword-identical? {:name cljs.core.keyword-identical?},
    list? {:name cljs.core.list?},
    long {:name cljs.core.long},
    long-array {:name cljs.core.long-array},
    longs {:name cljs.core.longs},
    mapv {:name cljs.core.mapv},
    nthrest {:name cljs.core.nthrest},
    obj-map {:name cljs.core.obj-map},
    object-array {:name cljs.core.object-array},
    object? {:name cljs.core.object?},
    persistent! {:name cljs.core.persistent!},
    pop! {:name cljs.core.pop!},
    print {:name cljs.core.print},
    print-str {:name cljs.core.print-str},
    println-str {:name cljs.core.println-str},
    prn-str {:name cljs.core.prn-str},
    prn-str-with-opts {:name cljs.core.prn-str-with-opts},
    random-sample {:name cljs.core.random-sample},
    reduce-kv {:name cljs.core.reduce-kv},
    reduceable? {:name cljs.core.reduceable?},
    reduced {:name cljs.core.reduced},
    reduced? {:name cljs.core.reduced?},
    regexp? {:name cljs.core.regexp?},
    reversible? {:name cljs.core.reversible?},
    rseq {:name cljs.core.rseq},
    rsubseq {:name cljs.core.rsubseq},
    seqable? {:name cljs.core.seqable?},
    sequence {:name cljs.core.sequence},
    short {:name cljs.core.short},
    shorts {:name cljs.core.shorts},
    shuffle {:name cljs.core.shuffle},
    some? {:name cljs.core.some?},
    sorted-map {:name cljs.core.sorted-map},
    sorted-map-by {:name cljs.core.sorted-map-by},
    sorted-set {:name cljs.core.sorted-set},
    sorted-set-by {:name cljs.core.sorted-set-by},
    sorted? {:name cljs.core.sorted?},
    special-symbol? {:name cljs.core.special-symbol?},
    subseq {:name cljs.core.subseq},
    test {:name cljs.core.test},
    to-array-2d {:name cljs.core.to-array-2d},
    transduce {:name cljs.core.transduce},
    transient {:name cljs.core.transient},
    unchecked-add {:name cljs.core.unchecked-add},
    unchecked-add-int {:name cljs.core.unchecked-add-int},
    unchecked-byte {:name cljs.core.unchecked-byte},
    unchecked-char {:name cljs.core.unchecked-char},
    unchecked-dec {:name cljs.core.unchecked-dec},
    unchecked-dec-int {:name cljs.core.unchecked-dec-int},
    unchecked-divide-int {:name cljs.core.unchecked-divide-int},
    unchecked-double {:name cljs.core.unchecked-double},
    unchecked-float {:name cljs.core.unchecked-float},
    unchecked-inc {:name cljs.core.unchecked-inc},
    unchecked-int {:name cljs.core.unchecked-int},
    unchecked-long {:name cljs.core.unchecked-long},
    unchecked-multiply {:name cljs.core.unchecked-multiply},
    unchecked-multiply-int {:name cljs.core.unchecked-multiply-int},
    unchecked-negate {:name cljs.core.unchecked-negate},
    unchecked-negate-int {:name cljs.core.unchecked-negate-int},
    unchecked-remainder-int {:name cljs.core.unchecked-remainder-int},
    unchecked-short {:name cljs.core.unchecked-short},
    unchecked-subtract {:name cljs.core.unchecked-subtract},
    unchecked-subtract-int {:name cljs.core.unchecked-subtract-int},
    unreduced {:name cljs.core.unreduced},
    unsigned-bit-shift-right {:name cljs.core.unsigned-bit-shift-right},
    update {:name cljs.core.update},
    val {:name cljs.core.val},
    volatile! {:name cljs.core.volatile!},
    volatile? {:name cljs.core.volatile?},
    vreset! {:name cljs.core.vreset!}})

(defn load-core-names []
  core-names)

(def cljs-macros (quote #{== time doseq bit-or nil? for bit-set false? true? bit-xor dotimes defmethod + this-as defrecord * - identical? bit-flip zero? bit-and / neg? assert inc bit-not aset bit-clear extend-type condp < amap > max >= bit-shift-left deftype <= pos? defmulti reify mod dec undefined? aget try bit-shift-right lazy-seq areduce alength defprotocol bit-and-not satisfies? assert-args binding min bit-test
                          array-map bit-shift-right-zero-fill byte case coercive-= coercive-boolean coercive-not coercive-not= defonce delay divide double exists? float hash-set implements? int js-arguments js-debugger js-delete js-in js-mod js-str js-this lazy-cat macroexpand macroexpand-1 make-array short simple-benchmark specify specify! truth_ unchecked-add unchecked-add-int unchecked-byte unchecked-char unchecked-dec
                          unchecked-dec-int unchecked-divide-int unchecked-double unchecked-float unchecked-inc unchecked-inc-int unchecked-multiply unchecked-multiply-int unchecked-negate unchecked-negate-int unchecked-remainder-int unchecked-short unchecked-subtract unchecked-subtract-int unsafe-bit-and unsigned-bit-shift-right vswap! with-out-str with-redefs}))

(def clojure-macros (set '[-> ->> ..  and as-> assert comment cond cond-> cond->> declare defn defn-
                           doto extend-protocol fn for if-let if-not if-some let letfn loop
                           memfn or some-> some->> when when-first when-let when-not when-some while]))